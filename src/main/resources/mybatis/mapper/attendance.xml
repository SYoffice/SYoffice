<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.syoffice.app.attendance.model.AttendanceDAO">

    <!-- 연차 내역 조회 -->
    <select id="selectLeaveHistory" parameterType="string" resultType="map">
        SELECT 
            leave_startdate AS leaveStart,
            leave_enddate AS leaveEnd,
            leave_subject AS leaveSubject,
            leave_content AS leaveContent
        FROM tbl_leaveform
        WHERE fk_doc_no IN (
            SELECT doc_no FROM tbl_document WHERE fk_emp_id = #{empId}
        )
        ORDER BY leave_startdate DESC
    </select>

    <!-- 사용한 연차 조회 -->
    <select id="selectUsedLeave" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM tbl_leaveform
        WHERE fk_doc_no IN (
            SELECT doc_no FROM tbl_document WHERE fk_emp_id = #{empId}
        )
    </select>

    <!-- 오늘의 출퇴근 정보 조회 -->
    <select id="getTodayAttendance" parameterType="string" resultType="com.syoffice.app.attendance.domain.AttendanceVO">
        SELECT 
            attend_no,
            attend_date,
            attend_start AS attendStart,  
            attend_end AS attendEnd,
            fk_emp_id AS empId,
            attend_status AS attendStatus
        FROM tbl_attendance
        WHERE fk_emp_id = #{empId}
          AND attend_date = TRUNC(SYSDATE)
    </select>

    <!-- 출근 (UPDATE 방식) -->
	<update id="checkIn" parameterType="string">
	    UPDATE tbl_attendance
	    SET attend_start = SYSDATE,
	        attend_status = CASE WHEN SYSDATE > TRUNC(SYSDATE) + (9/24) THEN 2 ELSE 1 END
	    WHERE fk_emp_id = #{empId}
	      AND attend_date = TRUNC(SYSDATE)
	      AND attend_start IS NULL
	</update>


    <!-- 퇴근 -->
    <update id="checkOut" parameterType="string">
        UPDATE tbl_attendance
        SET attend_end = SYSDATE
        WHERE fk_emp_id = #{empId}
          AND attend_date = TRUNC(SYSDATE)
          AND attend_start IS NOT NULL
          AND attend_end IS NULL
    </update>

    <!-- 근태 캘린더 -->
    <select id="getCalendarEvents" parameterType="map" resultType="com.syoffice.app.attendance.domain.AttendanceVO">
        <![CDATA[
        SELECT 
            d.dt AS attendDate,
            t.attend_start AS attendStart,
            t.attend_end   AS attendEnd,
            NVL(t.attend_status, 4) AS attendStatus
        FROM (
            SELECT TRUNC(TO_DATE(#{year} || '-' || LPAD(#{month}, 2, '0') || '-01', 'YYYY-MM-DD'), 'MONTH') + (LEVEL - 1) AS dt
            FROM DUAL
            CONNECT BY LEVEL <= LAST_DAY(TO_DATE(#{year} || '-' || LPAD(#{month}, 2, '0') || '-01', 'YYYY-MM-DD')) 
                                  - TRUNC(TO_DATE(#{year} || '-' || LPAD(#{month}, 2, '0') || '-01', 'YYYY-MM-DD'), 'MONTH') + 1
        ) d
        LEFT JOIN tbl_attendance t
            ON t.attend_date = d.dt
            AND t.fk_emp_id  = #{empId}
        UNION ALL
        SELECT 
            leave_startdate AS attendDate,
            NULL AS attendStart,
            NULL AS attendEnd,
            5 AS attendStatus
        FROM tbl_leaveform
        WHERE fk_doc_no IN (
            SELECT doc_no FROM tbl_document WHERE fk_emp_id = #{empId}
        )
        AND leave_startdate >= TO_DATE(#{year} || '-' || LPAD(#{month}, 2, '0') || '-01', 'YYYY-MM-DD')
        AND leave_startdate <= LAST_DAY(TO_DATE(#{year} || '-' || LPAD(#{month}, 2, '0') || '-01', 'YYYY-MM-DD'))
        ORDER BY attendDate
        ]]>
    </select>

    <!-- 주간 누적 근무시간 -->
    <select id="getWeeklyAccumulated" parameterType="string" resultType="string">
        SELECT 
            NVL(FLOOR(SUM((attend_end - attend_start) * 24)), 0) || 'h ' ||
            NVL(ROUND(MOD(SUM((attend_end - attend_start) * 24 * 60), 60)), 0) || 'm' AS total_work_time
        FROM tbl_attendance
        WHERE fk_emp_id = #{empId}
          AND attend_date BETWEEN TRUNC(SYSDATE, 'IW') AND TRUNC(SYSDATE)
          AND attend_start IS NOT NULL
          AND attend_end IS NOT NULL
    </select>

    <!-- 월간 누적 근무시간 -->
    <select id="getMonthlyAccumulated" parameterType="string" resultType="string">
        SELECT 
            NVL(FLOOR(SUM((attend_end - attend_start) * 24)), 0) || 'h ' ||
            NVL(ROUND(MOD(SUM((attend_end - attend_start) * 24 * 60), 60)), 0) || 'm' AS total_work_time
        FROM tbl_attendance
        WHERE fk_emp_id = #{empId}
          AND attend_date BETWEEN TRUNC(SYSDATE, 'MM') AND TRUNC(SYSDATE)
          AND attend_start IS NOT NULL
          AND attend_end IS NOT NULL
    </select>

    <!-- 결근 업데이트 
    <update id="updateAbsenceForEmployees">
        UPDATE tbl_attendance T
        SET attend_status = 6   
        WHERE attend_start IS NULL  
          AND attend_date &lt; TRUNC(SYSDATE)  
          AND NOT EXISTS (
              SELECT 1 FROM tbl_attendance A
              WHERE A.attend_date = T.attend_date
                AND A.attend_start IS NOT NULL
          )
          AND NOT EXISTS (
              SELECT 1 FROM dual
              WHERE TO_CHAR(T.attend_date, 'D') IN ('1', '7') 
          )
          AND NOT EXISTS (
              SELECT 1 FROM tbl_leaveform L
              WHERE L.leave_startdate &lt;= T.attend_date
                AND L.leave_enddate &gt;= T.attend_date
                AND L.fk_doc_no IN (
                    SELECT doc_no FROM tbl_document WHERE fk_emp_id = T.fk_emp_id
                )
          )
          AND EXISTS (
              SELECT 1 FROM tbl_employee E
              WHERE E.emp_id = T.fk_emp_id
                AND T.attend_date >= E.hire_date
          )
    </update>
  -->
  
    <!--  조직도(지점 + 부서)만 가져오도록 수정 -->
    <select id="selectBranchDeptList" resultType="map">
        SELECT 
            b.branch_no AS BRANCH_NO, 
            COALESCE(b.branch_name, '알 수 없음') AS branch_name,    
            d.dept_id,         
            COALESCE(d.dept_name, '알 수 없음') AS dept_name      
        FROM tbl_branch b
        JOIN tbl_department d ON b.branch_no = d.fk_branch_no 
        ORDER BY b.branch_no, d.dept_id
    </select>

    <!-- 선택한 부서의 근태 내역 조회 (날짜 필터 추가) -->
    <select id="selectOrganizationByDept" parameterType="map" resultType="map">
        SELECT 
            a.attend_no, 
            TO_CHAR(a.attend_date, 'YYYY-MM-DD') AS date,  
            a.attend_start, 
            a.attend_end, 
            a.attend_status,
            e.emp_id, 
            e.name AS emp_name, 
            d.dept_name, 
            d.dept_id, 
            b.branch_name
        FROM tbl_attendance a
        JOIN tbl_employee e ON a.fk_emp_id = e.emp_id
        JOIN tbl_department d ON e.fk_dept_id = d.dept_id
        JOIN tbl_branch b ON e.fk_branch_no = b.branch_no 
        WHERE d.dept_name = #{dept_name}     
          AND b.branch_name = #{branch_name}   
          AND a.attend_date = TO_DATE(#{date}, 'YYYY-MM-DD')  <!-- 날짜 필터 추가 -->
        ORDER BY a.attend_date DESC
    </select>

   
    <!-- ✅ 모든 지점 목록 조회 -->
    <select id="selectBranchList" resultType="map">
        SELECT branch_no AS branch_no, branch_name AS branch_name
        FROM tbl_branch
        ORDER BY branch_no
    </select>

    <!-- ✅ 특정 지점의 부서 목록 조회 -->
    <select id="selectDeptListByBranch" parameterType="string" resultType="map">
        SELECT DISTINCT d.dept_id, d.dept_name
		FROM tbl_department d
		JOIN tbl_employee e ON d.dept_id = e.fk_dept_id
		JOIN tbl_branch b ON e.fk_branch_no = b.branch_no
		WHERE b.branch_no = #{branch_no}
    </select>

    <!--  특정 부서의 근태 내역 조회 -->
    <select id="selectDeptAttendance" parameterType="map" resultType="map">
	    SELECT 
		    e.emp_id AS EMPID, 
		    e.name AS EMPNAME, 
		    d.dept_name AS DEPTNAME,
		    TO_CHAR(a.attend_date, 'YYYY-MM-DD') AS ATTENDDATE, 
		    NVL(TO_CHAR(a.attend_start, 'HH24:MI'), '-') AS STARTTIME,
		    NVL(TO_CHAR(a.attend_end, 'HH24:MI'), '-') AS ENDTIME,
		    CASE 
		        WHEN a.attend_status = 1 THEN '출근'
		        WHEN a.attend_status = 2 THEN '지각'
		        WHEN a.attend_status = 3 THEN '조퇴'
		        WHEN a.attend_status = 4 THEN '출근 전'
		        WHEN a.attend_status = 6 THEN '결근'
		        ELSE '미체크'
		    END AS STATUS
		FROM tbl_employee e
		JOIN tbl_attendance a ON e.emp_id = a.fk_emp_id
		JOIN tbl_department d ON e.fk_dept_id = d.dept_id
		WHERE d.dept_id = #{deptId}  
		  AND a.attend_date = TO_DATE(#{date}, 'YYYY-MM-DD')
		ORDER BY a.attend_date DESC

	</select>
    
    
    

    <!--  특정 부서의 연차 내역 조회 -->
    <select id="selectDeptLeaveHistory" parameterType="map" resultType="map">
        SELECT 
            e.emp_id AS empId, e.name AS empName, d.dept_name AS deptName,
            lf.leave_startdate AS leaveStart,
            lf.leave_enddate AS leaveEnd,
            lf.leave_subject AS leaveSubject
        FROM tbl_leaveform lf
        JOIN tbl_document doc ON lf.fk_doc_no = doc.doc_no
        JOIN tbl_employee e ON doc.fk_emp_id = e.emp_id
        JOIN tbl_department d ON e.fk_dept_id = d.dept_id
        WHERE d.dept_id = #{deptId} 
          AND lf.leave_startdate = TO_DATE(#{date}, 'YYYY-MM-DD')
        ORDER BY lf.leave_startdate DESC
    </select>
    
    <!--  스케쥴러  -->
    
    <!--  출근 전 스케쥴러 상태(4) -->
    <insert id="insertDailyAttendance">
	    INSERT INTO tbl_attendance (attend_no, attend_date, fk_emp_id, attend_status)
	    SELECT attend_seq.NEXTVAL, TRUNC(SYSDATE), e.emp_id, 4  -- 4 = 출근 전
	    FROM tbl_employee e
	    WHERE NOT EXISTS (
	        SELECT 1 FROM tbl_attendance a
	        WHERE a.fk_emp_id = e.emp_id
	        AND a.attend_date = TRUNC(SYSDATE)
	    )
   </insert>
   
   <!--  모든 직원의 연차 하루 증가 -->
    <update id="updateLeaveCount">
        UPDATE tbl_employee
        SET leave_count = leave_count + 1
    </update>
       
    <!--  모든 직원의 결근 처리 (공휴일 & 주말 제외) -->
	<update id="updateAbsenceForEmployees">
	    UPDATE attendance a
	    JOIN employee e ON a.emp_id = e.emp_id
	    SET a.attend_status = 6
	    WHERE a.attend_start IS NULL
	    AND a.attend_end IS NULL
	    AND a.attend_status = 4  
	    AND DATE(a.attend_date) = CURDATE()
	    AND NOT EXISTS (
	        SELECT 1 FROM holidays h
	        WHERE h.holiday_date = CURDATE()
	    )
	    AND WEEKDAY(a.attend_date) &lt; 5  
	</update>


    
      
</mapper>
