<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="com.syoffice.app.hr.model.HrDAO">
	
	<!-- 총 사원의 수 구해오기 -->
	<select id="getTotalCount" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM tbl_employee E
		JOIN tbl_grade G ON E.fk_grade_no = G.grade_no
		JOIN tbl_branch B ON E.fk_branch_no = B.branch_no
		JOIN tbl_department D ON E.fk_dept_id = D.dept_id
		WHERE status != 3
		<choose>
			<when test="searchType == 'dept_name' and searchWord != '' ">
				AND lower(dept_name) LIKE '%'||lower(#{searchWord})||'%'
			</when>
			<when test="searchType == 'grade_name' and searchWord != '' ">
				AND lower(grade_name) LIKE '%'||lower(#{searchWord})||'%'
			</when>
			<when test="searchType == 'branch_name' and searchWord != '' ">
				AND lower(branch_name) LIKE '%'||lower(#{searchWord})||'%'
			</when>
			<when test=' searchType == "name" and searchWord != "" '>
	     		AND lower(name) LIKE '%'||lower(#{searchWord})||'%'
	     	</when>
	     	<otherwise></otherwise>
		</choose>
	</select>
	
	<!-- 페이징과 검색이 포함된 사원목록 가져오기 -->
	<select id="selctEmployeeList" parameterType="HashMap" resultType="EmployeeVO">
		SELECT P.emp_id, P.name, P.grade_name, P.branch_name, P.dept_name, P.mail
		FROM 
		(
			SELECT ROW_NUMBER() OVER(ORDER BY G.grade_no ASC, E.emp_id ASC) AS RNO, 
           		   E.emp_id, E.name, G.grade_name, B.branch_name, D.dept_name, E.mail 
			FROM ( 
            SELECT DISTINCT emp_id, name, fk_grade_no, fk_branch_no, fk_dept_id, mail 
            FROM tbl_employee
            WHERE status != 3
        	) E
    		JOIN tbl_grade G ON E.fk_grade_no = G.grade_no
    		JOIN tbl_branch B ON E.fk_branch_no = B.branch_no
    		JOIN tbl_department D ON E.fk_dept_id = D.dept_id
			<choose>
				<when test=' searchType == "dept_name" and searchWord != "" '>
					AND lower(dept_name) LIKE '%'||lower(#{searchWord})||'%'
				</when>
				<when test=' searchType == "grade_name" and searchWord != "" '>
					AND lower(grade_name) LIKE '%'||lower(#{searchWord})||'%'
				</when>
				<when test=' searchType == "branch_name" and searchWord != "" '>
					AND lower(branch_name) LIKE '%'||lower(#{searchWord})||'%'
				</when>
				<when test=' searchType == "name" and searchWord != "" '>
		     		AND lower(name) LIKE '%'||lower(#{searchWord})||'%'
		     	</when>
		     	<otherwise></otherwise>
			</choose>
			) P
		 WHERE P.RNO BETWEEN #{startRno} AND #{endRno}
	</select>
	
	
	<!-- 신규 사원등록 시 부서 정보조회 -->
	<select id="selectDepartmentList">
		SELECT dept_id, dept_name, manager_id
		FROM tbl_department
		ORDER BY dept_id ASC
	</select>
	
	<!-- 신규 사원등록 시 직급 정보조회 -->
	<select id="selectGradeLst">
		SELECT grade_no, grade_name
		FROM tbl_grade
		ORDER BY grade_no ASC
	</select>
	
	<!-- 신규 사원등록 시 지점 정보조회 -->
	<select id="selectBranchList">
		SELECT branch_no, branch_name
		FROM tbl_branch
		ORDER BY branch_no ASC
	</select>
	
	<!-- 사내메일 중복 체크 -->
	<select id="checkMail" resultType="String" parameterType="String">
		SELECT count(*)
		FROM tbl_employee
		WHERE mail = #{mail}
	</select>
	
	<!-- 직속 상관 사번 알아오기 -->
	<select id="getLeaderId" parameterType="String">
		<!-- 본사일 경우 -->
		<!-- 소속 부서의 부서장 사원번호 -->
		<if test='branch_no == 1'>
			SELECT manager_id
			FROM tbl_department
			WHERE dept_id = #{dept_id}
		</if>
		<!-- 본사가 아닐 경우 -->
		<!-- 해당 지점에 상급자 사원번호 -->
		<if test='branch_no != 1'>
			SELECT emp_id
			FROM tbl_employee
			WHERE fk_branch_no = #{branch_no}
			AND fk_grade_no = (SELECT MIN(fk_grade_no) FROM tbl_employee where fk_branch_no = #{branch_no})
		</if>
	</select>
	
	<!-- 신규 사원정보 insert -->
	<insert id="employeeRegister" parameterType="HashMap">
		INSERT INTO tbl_employee  ( emp_id, fk_dept_id, name, password, tel, personal_mail, hire_date, mail, 
                           			postcode, address, detailaddress, extraaddress, gender, birthday, fk_grade_no,
                           			status, pwdchangedate, pwdchangestatus, leave_count, profile_img, fk_branch_no, leader_id )
		VALUES (TO_NUMBER(EXTRACT(YEAR FROM SYSDATE) || LPAD(emp_seq.NEXTVAL, 3, '0')), #{dept_id}, #{name}, '03ac674216f3e15c761ee1a5e255f067953623c8b388b4459e13f978d7c846f4', #{tel},
				#{personal_mail}, default, #{mail}, #{postcode}, #{address}, #{detailaddress}, #{extraaddress}, #{gender}, #{birthday},
				#{grade_no}, default, null, default, default, #{profile_img	}, #{branch_no},
				<if test='leader_id == null'>
					default
				</if>
				<if test='leader_id != null'>
					#{leader_id}
				</if>
				)
	</insert>
	
	
	<!-- 사원 한명의 정보를 select -->
	<select id="employeeDetail" parameterType="String" resultType="EmployeeVO">
		SELECT  E.emp_id, name, tel, personal_mail, TO_CHAR(E.hire_date, 'YYYY-MM-DD') AS hire_date, 
				mail, postcode, address, detailaddress, extraaddress, gender, 
				birthday, status, profile_img, G.grade_name, B.branch_name, D.dept_name
		FROM tbl_employee E
		JOIN tbl_grade G ON E.fk_grade_no = G.grade_no
		JOIN tbl_branch B ON E.fk_branch_no = B.branch_no
		JOIN tbl_department D ON E.fk_dept_id = D.dept_id
		WHERE emp_id = #{emp_id}
	</select>
	
	
	<!-- 사원정보 update -->
	<update id="employeeEdit" parameterType="HashMap">
		UPDATE tbl_employee 
		SET    name = #{name}, birthday = #{birthday}, gender = #{gender}, personal_mail = #{personal_mail},
			   mail = #{mail}, tel = #{tel}, postcode = #{postcode}, detailaddress = #{detailaddress},
			   extraaddress = #{extraaddress}, fk_branch_no = #{branch_no}, fk_dept_id = #{dept_id},
			   fk_grade_no = #{grade_no}, status = #{empstatus}, profile_img = #{profile_img},
			   leader_id = 
			   <if test='leader_id == null'>
				   default
			   </if>
			   <if test='leader_id != null'>
				   #{leader_id}
			   </if>
		WHERE emp_id = #{emp_id}
	</update>
	
	
	
	<!-- 검색만 있는 부서 목록 조회 (부서관리용) -->
	<select id="DepartmentList" parameterType="HashMap" resultType="DepartmentVO">
		WITH sales_department_manager AS (
		    SELECT 
		        e.fk_branch_no, 
		        e.leader_id AS manager_id, 
		        e.name AS manager_name, 
		        e.mail AS manager_email, 
		        g.grade_name AS manager_grade
		    FROM tbl_employee e
		    JOIN tbl_grade g ON e.fk_grade_no = g.grade_no 
		    WHERE e.fk_dept_id = 8
		    AND e.emp_id = (
		        SELECT leader_id
		        FROM tbl_employee e3 
		        WHERE e3.fk_branch_no = e.fk_branch_no AND e3.fk_dept_id = 8 
		        AND e3.fk_grade_no = e.fk_grade_no
		        AND ROWNUM = 1
		    )
		)
		SELECT 
		    b.branch_name AS branch_name,
		    b.branch_no AS branch_no,
		    d.dept_name AS dept_name,
		    d.dept_id AS dept_id,
		    COUNT(e.emp_id) AS employee_count,
		    COALESCE(m.emp_id, p.manager_id) AS manager_id,
		    COALESCE(m.name, p.manager_name) AS manager_name,
		    COALESCE(g.grade_name, p.manager_grade) AS manager_grade,
		    COALESCE(m.mail, p.manager_email) AS manager_email,
		    d.executive_id AS executive_id 
		FROM tbl_department d
		LEFT JOIN tbl_employee e ON d.dept_id = e.fk_dept_id
		LEFT JOIN tbl_branch b ON e.fk_branch_no = b.branch_no
		LEFT JOIN tbl_employee m ON d.manager_id = m.emp_id
		LEFT JOIN tbl_grade g ON m.fk_grade_no = g.grade_no
		LEFT JOIN sales_department_manager p ON d.dept_id = 8 AND p.fk_branch_no = e.fk_branch_no
        <where>
            <choose>
                <when test="searchType == 'dept_name' and searchWord != ''">
                    AND lower(d.dept_name) LIKE '%'||lower(#{searchWord})||'%'
                </when>
                <when test="searchType == 'branch_name' and searchWord != ''">
                    AND lower(b.branch_name) LIKE '%'||lower(#{searchWord})||'%'
                </when>
                <when test="searchType == 'manager_name' and searchWord != ''">
                    AND lower(m.name) LIKE '%'||lower(#{searchWord})||'%'
                </when>
            </choose>
        </where>
 		GROUP BY 
            b.branch_name, b.branch_no, d.dept_name, d.dept_id, d.executive_id, m.emp_id, 
            p.manager_id, m.name, p.manager_name, g.grade_name, p.manager_grade, m.mail, p.manager_email
        ORDER BY branch_no, dept_id
	</select>
	
	
	<!-- 부서별 사원리스트 (부서관리용) -->
	<select id="DepartmentEmployeeInfo" resultType="EmployeeVO">
	    SELECT E.emp_id, G.grade_name, E.name, E.mail AS mail, E.status, B.branch_name
	    FROM tbl_employee E
	    JOIN tbl_grade G ON E.fk_grade_no = G.grade_no
	    JOIN tbl_branch B ON E.fk_branch_no = B.branch_no
	    WHERE E.fk_dept_id = #{dept_id} AND E.fk_branch_no = #{branch_no}
	    ORDER BY G.grade_no ASC
	</select>


	<!-- 부서 추가할 때 필요한 부서장 리스트 가져오기 -->
	<select id="mananagerList" resultType="EmployeeVO">
		SELECT E.emp_id, E.name, G.grade_name, E.fk_dept_id, E.fk_branch_no
		FROM tbl_employee E
		JOIN tbl_grade G ON E.fk_grade_no = G.grade_no
		WHERE E.status = '1'
		AND E.fk_grade_no IN (3, 4)	<!-- 부장, 차장 -->
		<!-- 이미 부서장인 사람들 제외 -->
		AND E.emp_id NOT IN (
		    SELECT DISTINCT manager_id FROM tbl_department WHERE manager_id IS NOT NULL
		) 
		<!-- 다른 부서의 담당 임원은 제외 -->
		AND E.emp_id NOT IN (
		    SELECT DISTINCT executive_id FROM tbl_department WHERE executive_id IS NOT NULL
		)
		<!-- 판매부 지점장 제외 -->
		AND E.emp_id NOT IN (
	        SELECT DISTINCT leader_id 
	        FROM tbl_employee 
	        WHERE leader_id IS NOT NULL
	    ) 
		ORDER BY E.fk_grade_no ASC, E.emp_id ASC
	</select>
	
	<!-- 부서 추가할 때 필요한 임원진 리스트 가져오기 -->
	<select id="executiveList" resultType="EmployeeVO">
		SELECT e.emp_id, e.name, g.grade_name, e.fk_dept_id, e.fk_branch_no
		FROM tbl_employee e
		JOIN tbl_grade g ON e.fk_grade_no = g.grade_no
		WHERE e.status = '1'
		AND e.fk_dept_id = 1
		AND e.fk_grade_no IN (1, 2)
		AND e.fk_branch_no = 1
		AND e.emp_id NOT IN (
		    SELECT DISTINCT executive_id FROM tbl_department WHERE executive_id IS NOT NULL
		)
		ORDER BY e.fk_grade_no ASC, e.emp_id ASC
	</select>
	
	
	<select id="getDept_id" resultType="Integer">
		SELECT MAX(dept_id) + 1 
		FROM tbl_department
	</select>
	
	
	<!-- 신규 부서등록하기 -->
	<insert id="RegisterDepartment" parameterType="HashMap">
	    INSERT INTO tbl_department (dept_id, dept_name, manager_id, executive_id)
	    VALUES (#{new_dept_id}, #{dept_name}, 
	        <if test="manager_id != null and manager_id != ''"> #{manager_id} </if>
	        <if test="manager_id == null or manager_id == ''"> NULL </if>,
	        <if test="executive_id != null and executive_id != ''"> #{executive_id} </if>
	        <if test="executive_id == null or executive_id == ''"> NULL </if>
	    	   )
	</insert>


	<!-- 부서장 정보 업데이트 (update) -->
	<update id="updateManagerInfo" parameterType="HashMap">
	    UPDATE tbl_employee 
	    SET fk_dept_id = #{new_dept_id}, 
	        leader_id = 
	        <if test="leader_id != null">
	            #{leader_id}
	        </if>
	        <if test="leader_id == null">
	            NULL
	        </if>
	    WHERE emp_id = #{manager_id}
	</update>

	<!-- 부서명 중복검사 -->
	<select id="checkDeptName" parameterType="String" resultType="Integer">
		SELECT count(*)
		FROM tbl_department
		WHERE LOWER(dept_name) = LOWER(#{dept_name})
	</select>
	
	
	<!-- 수정모달 사용 시 특정 부서의 정보 조회(판매부 제외) -->
	<select id="getDepartmentInfo" parameterType="HashMap" resultType="DepartmentVO">
	    SELECT dept_id, dept_name, manager_id, executive_id, B.branch_no
		FROM tbl_department D
		JOIN tbl_employee E ON D.dept_id = E.fk_dept_id
		JOIN tbl_branch B ON E.fk_branch_no = B.branch_no
		WHERE dept_id = #{dept_id} AND ROWNUM = 1
	</select>
	
	<!-- 수정모달 사용 시 특정 부서의 정보 조회(판매부만) -->
	<select id="getDepartmentInfo_sales" parameterType="HashMap" resultType="DepartmentVO">
		SELECT dept_id, dept_name, executive_id, 
		       B.branch_name, E.name AS manager_name, E.fk_branch_no AS branch_no,
		       E.leader_id AS manager_id
		FROM tbl_department D
		JOIN tbl_employee E ON D.dept_id = E.fk_dept_id
		JOIN tbl_branch B ON E.fk_branch_no = B.branch_no
		WHERE D.dept_id = 8
		  AND E.fk_branch_no = TO_NUMBER(#{branch_no})
		  AND E.emp_id = (
		      SELECT MIN(E2.emp_id)
		      FROM tbl_employee E2
		      WHERE E2.fk_dept_id = 8 
		        AND E2.fk_branch_no = TO_NUMBER(#{branch_no})
		        AND E2.emp_id = E2.leader_id
		)
	</select>
	
	<!-- 모든 부서장이 될 수 있는 사원들 조회 -->
	<select id="getAllManagers" resultType="EmployeeVO">
	    SELECT E.emp_id, E.name, G.grade_name, E.fk_dept_id, E.fk_branch_no
		FROM tbl_employee E
		JOIN tbl_grade G ON E.fk_grade_no = G.grade_no
		WHERE E.status = '1'
		AND E.fk_grade_no IN (3, 4) 
		ORDER BY E.fk_grade_no ASC, E.emp_id ASC 
	</select>
	
	<!-- 모든 담당임원이 될 수 있는 사원들 조회 -->
	<select id="getAllExecutives" resultType="EmployeeVO">
	    SELECT e.emp_id, e.name, g.grade_name, e.fk_dept_id, e.fk_branch_no
		FROM tbl_employee e
		JOIN tbl_grade g ON e.fk_grade_no = g.grade_no
		WHERE e.status = '1'
		AND e.fk_dept_id = 1 
		AND e.fk_grade_no IN (1, 2) 
		AND e.fk_branch_no = 1
		ORDER BY e.fk_grade_no ASC, e.emp_id ASC
	</select>
	
	<!-- 부서장의 전 소속 부서번호 알아오기 -->
	<select id="getPreviousDeptId" parameterType="String" resultType="String">
		SELECT dept_id
		FROM tbl_department
		WHERE manager_id = #{manager_id}
	</select>
	
	<!-- 지점장의 전 소속 지점번호 알아오기 -->
	<select id="getPreviousBranchNo" parameterType="String" resultType="String">
		SELECT fk_branch_no
		FROM tbl_employee
		WHERE emp_id = #{manager_id}
	</select>
	
	<!-- 부서가 판매부가 아닐 떄 부서 정보 수정 -->
	<update id="editDepartment" parameterType="HashMap">
		UPDATE tbl_department
		SET dept_name = #{dept_name},
    		manager_id = #{manager_id},
    		executive_id = #{executive_id}
    	WHERE dept_id = #{dept_id}
	</update>
	
	<!-- 해당 부서 소속 사원들의 직속상관아이디(leader_id) 새로운 부서장으로 교체 -->
	<update id="updateEmpLeaderId" parameterType="HashMap">
		UPDATE tbl_employee
		SET leader_id = #{manager_id}
		WHERE fk_dept_id = #{dept_id}
	</update>
	
	<!-- 새로 임명된 부서장의 담당임원 아이디와 부서번호 교체 -->
	<update id="updateManagerLeaderId" parameterType="HashMap">
		UPDATE tbl_employee
		SET leader_id = #{executive_id}, fk_dept_id = #{dept_id}, fk_branch_no = #{branch_no}
		WHERE emp_id = #{manager_id}
	</update>
	
	<!-- 다른 부서의 부서장이였던 경우 전 소속 부서테이블의 부서장아이디 null 값으로 교체 -->
	<update id="updatePreviousManagerId" parameterType="HashMap">
		UPDATE tbl_department
		SET manager_id = NULL
		WHERE dept_id = #{previous_dept_id}
	</update>
	
	<!-- 전 소속 부서원들의 직속상관아이디(leader_id) null 값으로 교체 -->
	<update id="updatePreviousLeaderId" parameterType="HashMap">
		UPDATE tbl_employee
		SET leader_id = NULL
		WHERE fk_dept_id = #{previous_dept_id} AND emp_id != #{manager_id}
	</update>
	
	<!-- 부서가 판매부일 떄 부서 정보 수정 -->
	<update id="editDepartment_sales" parameterType="HashMap">
		UPDATE tbl_employee
		SET leader_id = #{manager_id}
		WHERE fk_branch_no = #{branch_no} AND fk_dept_id = #{dept_id}
	</update>
	
	<!-- 새로 온 지점장의 정보 변경 -->
	<update id="updateLeaderInfo" parameterType="HashMap">
		UPDATE tbl_employee
		SET fk_dept_id = #{dept_id},
			fk_branch_no = #{branch_no}, 
			leader_id = #{manager_id}
		WHERE emp_id = #{manager_id}
	</update>
	
	<!-- 변경된 지점에 소속된 사원들의 정보변경 -->
	<update id="updateBranchInfo" parameterType="HashMap">
		UPDATE tbl_employee
		SET fk_dept_id = #{dept_id},
			fk_branch_no = #{branch_no}, 
			leader_id = #{manager_id}
		WHERE fk_branch_no = #{branch_no}
	</update>
	
	<!-- 전 소속 지점의 지점장 자동설정을 위해 다음 직급이 높은 사원 알아오기 -->
	<select id="getNewLeaderId" parameterType="HashMap" resultType="String">
		SELECT MIN(emp_id)
		FROM tbl_employee
		WHERE fk_branch_no = #{previous_branch_no}
		AND fk_grade_no = (SELECT MIN(fk_grade_no) 
		                   FROM tbl_employee 
		                   WHERE fk_branch_no = #{previous_branch_no})
	</select>
	
	<!-- 전 소속 지점의 사원들의 정보변경 -->
	<update id="updatePreviousBranchInfo" parameterType="HashMap">
		UPDATE tbl_employee
		SET leader_id = #{new_leader_id}
		WHERE fk_branch_no = #{previous_branch_no}
	</update>
	
	
	
	 <!-- 부서에 소속된 직원 수 확인 -->
    <select id="getEmployeeCountByDeptId" resultType="Integer">
        SELECT COUNT(*)
        FROM tbl_employee
        WHERE fk_dept_id = #{dept_id}
    </select>

    <!-- 부서 삭제 -->
    <delete id="deleteDepartment">
        DELETE FROM tbl_department
        WHERE dept_id = #{dept_id}
    </delete>
		
	
</mapper>



