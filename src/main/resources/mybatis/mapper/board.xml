<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== SqlSessionTemplate(myBatis 3.0 이전 버전)을 사용하지 않는 Mapper Interface(myBatis 3.0 이상 버전 부터 사용가능함) 예제 ==== -->
<!--      매퍼.xml 파일이 DAO인터페이스를 구현하는 DAO클래스의 역할을 대신해준다. 
          namespace 는 DAO인터페이스명으로 해야 한다.!!!!!중요!!!!  -->
<mapper namespace="com.syoffice.app.board.model.BoardDAO"><!-- 4. 맵퍼 설정하기 -->

<!-- ///////////////////////////////////////// 공지사항 시작 ///////////////////////////////////////////////////	 -->	  
   <!-- 부서번호로 부서명 알아오기 -->
   <select id="getDeptName" parameterType="String" resultType="NoticeBoardVO">
		select dept_name
		from tbl_department
		where dept_id = #{fk_dept_id}
   </select>
	  
	  
   <!-- 공지사항 게시판 글쓰기 insert(파일첨부가 없는) -->
   <insert id="noticeBoardWrite" parameterType="NoticeBoardVO">
  		insert into tbl_notice(notice_no, notice_subject, notice_content, notice_regdate, notice_viewcount, fk_emp_id, notice_status)
		values(notice_seq.nextval, #{notice_subject} , #{notice_content} , default, default, #{fk_emp_id} , default)
   </insert> 
  
	  
   <!-- 공지사항게시판 마지막 글번호 조회(파일첨부시 필요) -->
   <select id="notice_no" resultType="Integer">
		SELECT MAX(notice_no)
		FROM tbl_notice
   </select>  
	  
	  
	<!-- 공지사항 게시판 테이블 및 파일첨부 테이블에 insert(파일 첨부가 있는) -->  
	<insert id="NoticeWrite_withFile" parameterType="NoticeBoardVO">
		insert into tbl_attach_notice(atnotice_no, fk_notice_no, atnotice_filename, atnotice_orgfilename ,atnotice_filesize)
		values(atnotice_seq.nextval, to_number(#{notice_no}), #{atnotice_filename} ,#{atnotice_orgfilename}, #{atnotice_filesize} )
	</insert>  
	  
	  
	<!-- 페이징 처리를 안한 검색어가 없는 공지사항 게시판 전체 글목록 보여주기 -->  
	<resultMap type="HashMap" id="noticeBoardListNoSearch_Map">
		<result property="notice_no" 		column="notice_no" 			javaType="String"/>
		<result property="fk_emp_id" 		column="fk_emp_id" 			javaType="String"/>
		<result property="name" 			column="name" 				javaType="String"/>
		<result property="notice_subject" 	column="notice_subject" 	javaType="String"/>
		<result property="notice_content" 	column="notice_content" 	javaType="String"/>
		<result property="notice_viewcount" column="notice_viewcount" 	javaType="String"/>
		<result property="notice_regdate" 	column="notice_regdate" 	javaType="String"/>
	</resultMap>
	<select id="noticeBoardListNoSearch" resultMap="noticeBoardListNoSearch_Map">
		SELECT B.notice_no, B.fk_emp_id, E.name, B.notice_subject, B.notice_content,
		       B.notice_viewcount, 
		       TO_CHAR(B.notice_regdate, 'yyyy-mm-dd hh24:mi:ss') AS notice_regdate
		FROM tbl_notice B
		JOIN tbl_employee E ON E.emp_id = B.fk_emp_id
		WHERE B.notice_status = 1
		ORDER BY B.notice_no DESC
	</select>  
	  
	  
	<!-- 공지사항 게시판의 총 게시물 건수 (totalCount를 구해야 페이징처리 가능) 검색이 있을 때와 검색이 없을때로 나뉜다. 글쓴이로 검색했을때 name이 필요하므로 employee 테이블과 join -->
	<select id="getNoticeTotalCount" parameterType="HashMap" resultType="int">
		SELECT count(*)
		FROM tbl_notice B
		JOIN tbl_employee E ON E.emp_id = B.fk_emp_id
		WHERE notice_status = 1
	    <choose>
	   		<when test='searchType == "subject" and searchWord != ""'>
	   			and lower(notice_subject) like '%'|| lower(#{searchWord}) ||'%'
	   		</when>
	   		<when test='searchType == "content" and searchWord != ""'>
	   			and lower(notice_content) like '%'|| lower(#{searchWord}) ||'%'
	   		</when>
	   		<when test='searchType == "subject_content" and searchWord != ""'>
	   			and (lower(notice_subject) like '%'|| lower(#{searchWord}) ||'%' or lower(notice_content) like '%'|| lower(#{searchWord}) ||'%')
	   		</when>
	   		<when test='searchType == "name" and searchWord != ""'>
	   			and lower(name) like '%'|| lower(#{searchWord}) ||'%'
	   		</when>
	   		<otherwise></otherwise>
	    </choose>
	 </select>  
	  
	  
	 <!-- 공지사항 글목록 가져오기(페이징 처리 했으며, 검색어가 있는것 또는 검색어가 없는 것 모두 다 포함한 것이다.) --> 
	 <resultMap type="HashMap" id="noticeBoardListSearch_withPaging_Map">
	 	<result property="notice_no" 			column="notice_no" 				javaType="String"/>
	 	<result property="fk_emp_id" 			column="fk_emp_id" 				javaType="String"/>
	 	<result property="name" 				column="name" 					javaType="String"/>
	 	<result property="notice_subject" 		column="notice_subject" 		javaType="String"/>
	 	<result property="notice_viewcount"		column="notice_viewcount" 		javaType="String"/>
	 	<result property="notice_regdate" 		column="notice_regdate" 		javaType="String"/>
	 	<result property="atnotice_filename" 	column="atnotice_filename" 		javaType="String"/>
	 	<result property="atnotice_orgfilename" column="atnotice_orgfilename" 	javaType="String"/>
	 	<result property="notice_content" 		column="notice_content" 		javaType="String"/>
	 </resultMap>
	 <select id="noticeBoardListSearch_withPaging" parameterType="HashMap" resultMap="noticeBoardListSearch_withPaging_Map">
		SELECT notice_no
		     , fk_emp_id
		     , name
		     , notice_subject
		     , notice_viewcount
		     , notice_regdate
		     , filenames       AS atnotice_filename
		     , orgfilenames    AS atnotice_orgfilename
		     , notice_content
		FROM
		(
		    SELECT rownum AS rno,
		           notice_no,
		           fk_emp_id,
		           name,
		           notice_subject,
		           notice_viewcount,
		           notice_regdate,
		           filenames,
		           orgfilenames,
		           notice_content
		    FROM
		    (
		        SELECT b.notice_no,
		               b.fk_emp_id,
		               e.name,
		               b.notice_subject,
		               b.notice_content,
		               b.notice_viewcount,
		               TO_CHAR(b.notice_regdate, 'yyyy-mm-dd hh24:mi:ss') AS notice_regdate,
		               LISTAGG(a.atnotice_filename, ',')
		                   WITHIN GROUP (ORDER BY a.atnotice_no) AS filenames,
		               LISTAGG(a.atnotice_orgfilename, ',')
		                   WITHIN GROUP (ORDER BY a.atnotice_no) AS orgfilenames
		        FROM tbl_notice b
		        JOIN tbl_employee e 
		           ON e.emp_id = b.fk_emp_id
		        LEFT JOIN tbl_attach_notice a 
		           ON a.fk_notice_no = b.notice_no
		        WHERE b.notice_status = 1
	      <choose>
	          <when test='searchType == "subject" and searchWord != ""'>
	            and lower(notice_subject) like '%'||lower(#{searchWord})||'%'
	          </when>
	          <when test='searchType == "content" and searchWord != ""'>
	            and lower(notice_content) like '%'||lower(#{searchWord})||'%'
	          </when>
	          <when test='searchType == "subject_content" and searchWord != ""'>
	            and (lower(notice_subject) like '%'||lower(#{searchWord})||'%' or lower(notice_content) like '%'||lower(#{searchWord})||'%')
	          </when>
	          <when test='searchType == "name" and searchWord != ""'>
	            and lower(name) like '%'||lower(#{searchWord})||'%'
	          </when>
	          <otherwise></otherwise>
	       </choose>
				 GROUP BY b.notice_no,
				                 b.fk_emp_id,
				                 e.name,
				                 b.notice_subject,
				                 b.notice_content,
				                 b.notice_viewcount,
				                 b.notice_regdate
				        
				        ORDER BY b.notice_regdate DESC
				    ) V
				)
				WHERE rno BETWEEN #{startRno} AND #{endRno}
	 </select> 
	  
	<!-- 공지사항 게시판 글 1개 조회하기(조회수 증가는 아래 쿼리문에서 실행, 이전글, 다음글 데이터도 가져옴) -->  
	<select id="getView" resultType="NoticeBoardVO" parameterType="HashMap">
			SELECT previousseq, 
			       COALESCE(CAST(
			           CASE 
			               WHEN LENGTH(previoussubject) &lt; 30 THEN previoussubject 
			               ELSE SUBSTR(previoussubject, 1, 28) || '...' 
			           END 
			       AS NVARCHAR2(30)), N'..') AS previoussubject,
			
			       notice_no, 
			       fk_emp_id, 
			       name, 
			       notice_subject, 
			       notice_content, 
			       notice_viewcount, 
			       notice_regdate, 
			       nextseq, 
			
			       COALESCE(CAST(
			           CASE 
			               WHEN LENGTH(nextsubject) &lt; 30 THEN nextsubject 
			               ELSE SUBSTR(nextsubject, 1, 28) || '...' 
			           END 
			       AS NVARCHAR2(30)), N'..') AS nextsubject,
			
			       atnotice_filename, 
			       atnotice_orgfilename, 
			       atnotice_filesize
			       
			FROM (
			    SELECT 
			        LAG(N.notice_no) OVER(ORDER BY N.notice_no DESC) AS previousseq,
			        LAG(N.notice_subject) OVER(ORDER BY N.notice_no DESC) AS previoussubject,
			
			        N.notice_no, 
			        N.fk_emp_id, 
			        E.name,
			        N.notice_subject, 
			        N.notice_content, 
			        N.notice_viewcount, 
			        N.notice_regdate,
			        LEAD(N.notice_no) OVER(ORDER BY N.notice_no DESC) AS nextseq,
			        LEAD(N.notice_subject) OVER(ORDER BY N.notice_no DESC) AS nextsubject,
			
			        COALESCE(LISTAGG(A.atnotice_filename, ', ') WITHIN GROUP (ORDER BY A.atnotice_no), '') AS atnotice_filename,
			        COALESCE(LISTAGG(A.atnotice_orgfilename, ', ') WITHIN GROUP (ORDER BY A.atnotice_no), '') AS atnotice_orgfilename,
			        COALESCE(SUM(A.atnotice_filesize), 0) AS atnotice_filesize
			
			    FROM tbl_notice N
			    JOIN tbl_employee E 
			        ON N.fk_emp_id = E.emp_id
			    LEFT JOIN tbl_attach_notice A 
			        ON N.notice_no = A.fk_notice_no
			
			    WHERE N.notice_status = 1  
				    <choose>
			          <when test='searchType == "subject" and searchWord != ""'>
			            and lower(notice_subject) like '%'||lower(#{searchWord})||'%'
			          </when>
			          <when test='searchType == "content" and searchWord != ""'>
			            and lower(notice_content) like '%'||lower(#{searchWord})||'%'
			          </when>
			          <when test='searchType == "subject_content" and searchWord != ""'>
			            and (lower(notice_subject) like '%'||lower(#{searchWord})||'%' or lower(notice_content) like '%'||lower(#{searchWord})||'%')
			          </when>
			          <when test='searchType == "name" and searchWord != ""'>
			            and lower(name) like '%'||lower(#{searchWord})||'%'
			          </when>
			          <otherwise></otherwise>
			       </choose> 
				    GROUP BY N.notice_no, N.fk_emp_id, E.name, N.notice_subject, 
				             N.notice_content, N.notice_viewcount, N.notice_regdate
				) V
				WHERE V.notice_no = #{notice_no}
	</select>  
	  
	<!-- 공지사항 게시판 loginuser가 있고, 게시글이 있고, 다른 작성자의 글을 조회할 경우 조회수 1증가하기 -->  
	<update id="increase_noticeViewCount" parameterType="String">
	   	update tbl_notice set notice_viewcount = notice_viewcount +1
   		where notice_no = to_number(#{notice_no})
	</update>
	  
	  
	<!-- 공지사항 게시판 수정하기 -->
    <update id="update_notice_board" parameterType="NoticeBoardVO">
		  UPDATE tbl_notice 
		  SET notice_subject = #{notice_subject}, 
		      notice_content = #{notice_content},
		      notice_regdate = default 
		  WHERE notice_no = TO_NUMBER(#{notice_no})
    </update>  
	  
	
	<!-- === 1개 글을 삭제할 때 먼저 사진이미지파일명 및 첨부파일명을 알아오기 위한것 ===  resultMap="HashMap" 기억!! 스마트에디터 먼저 해야함-->  
    <resultMap type="HashMap" id="noticeBoardView_delete_map">
   	  <result property="notice_no" 			column="notice_no" 				javaType="String"/>	
   	  <result property="atnotice_filename" 	column="atnotice_filename" 		javaType="String"/>
   	  <result property="photofilename" 		column="photofilename"  		javaType="String"/>
    </resultMap>
    <select id="ischeckAttachfile" resultMap="noticeBoardView_delete_map" parameterType="String">
		 SELECT 
		     n.notice_no, 
		     a.atnotice_filename, 
		     CASE 
		         WHEN FUNC_NPHOTO_UPLOAD_DELETE(n.notice_no) IS NOT NULL THEN 
		              substr(FUNC_NPHOTO_UPLOAD_DELETE(n.notice_no), 2) 
		         ELSE NULL 
		     END AS photofilename
		 FROM tbl_notice n
		 LEFT JOIN tbl_attach_notice a 
		     ON n.notice_no = a.fk_notice_no
		 WHERE 
		     (EXISTS (
		         SELECT 1 FROM tbl_attach_notice WHERE fk_notice_no = n.notice_no
		     ) 
		     OR 
		     FUNC_NPHOTO_UPLOAD_DELETE(n.notice_no) IS NOT NULL)
		     <if test="notice_no != null">
		         AND n.notice_no = #{notice_no} 
		     </if>
    </select>
	
	  
   <!-- === (파일첨부, 사진이미지가 들었는 경우 포함) 공지사항 글 삭제하기 ===  -->
   <delete id="noticeBoardDel" parameterType="String">
   		delete from tbl_notice
   		where notice_no = #{notice_no} 
   </delete>	  

<!-- ======================================== 공지사항 임시저장 테이블 =======================================================================  -->	  
	  
	<!-- 공지사항 테이블에 임시저장상태(status = 2 ) 로 insert 해주는 메소드(파일이 없을 경우)  -->
	<insert id="noticeTempBoardWrite" parameterType="NoticeBoardVO">
		  insert into tbl_notice(notice_no, notice_subject, notice_content, notice_regdate, notice_viewcount, fk_emp_id, notice_status)
		  values(notice_seq.nextval, #{notice_subject} , #{notice_content} , default, default, #{fk_emp_id} , 2)
	</insert>	  
	  
	  
	<!-- 공지사항 임시저장 글 목록 조회 (페이징 처리 및 모달창에 띄우기) -->
 	<resultMap type="HashMap" id="noticeTemporaryBoardList_Map">
	    <result property="rno" 					column="rno" 					javaType="String"/>
	    <result property="notice_no" 			column="notice_no" 				javaType="String"/>
	    <result property="notice_subject" 		column="notice_subject" 		javaType="String"/>
	    <result property="notice_regdate" 		column="notice_regdate" 		javaType="String"/>
	    <result property="atnotice_filename" 	column="atnotice_filename" 		javaType="String"/>
	    <result property="atnotice_orgfilename" column="atnotice_orgfilename" 	javaType="String"/>
	</resultMap>
	<select id="noticeTemporaryBoardList" parameterType="HashMap" resultMap="noticeTemporaryBoardList_Map">
			SELECT rno, notice_no, notice_subject, notice_regdate, atnotice_filename, atnotice_orgfilename
			FROM (
			    SELECT ROWNUM AS rno, 
			           notice_no,
			           notice_subject,
			           TO_CHAR(notice_regdate, 'YYYY-MM-DD HH24:MI:SS') AS notice_regdate,
			           atnotice_filename,
			           atnotice_orgfilename
			    FROM (
			        SELECT n.notice_no,
			               n.notice_subject,
			               n.notice_regdate,
			               NVL(LISTAGG(a.atnotice_filename, ',') WITHIN GROUP (ORDER BY a.atnotice_no), '') AS atnotice_filename,
			               NVL(LISTAGG(a.atnotice_orgfilename, ',') WITHIN GROUP (ORDER BY a.atnotice_no), '') AS atnotice_orgfilename
			        FROM tbl_notice n
			        LEFT JOIN tbl_attach_notice a
			               ON n.notice_no = a.fk_notice_no
			        WHERE n.notice_status = 2 
			           AND n.fk_emp_id = #{fk_emp_id} 
			        GROUP BY n.notice_no, n.notice_subject, n.notice_regdate
			        ORDER BY n.notice_regdate DESC
			    )
			)
			WHERE rno BETWEEN #{startRow} AND #{endRow}
	</select>
 
	<!-- 페이징 처리를 위한 loginuser가 작성한 공지사항 전체 임시저장 글 수 조회 -->
	<select id="getTemporaryBoardCount" parameterType="String" resultType="int">
	    SELECT COUNT(*)
	    FROM tbl_notice
	    WHERE notice_status = 2 
	    AND fk_emp_id = #{fk_emp_id}
	</select>	   

<!-- 공지사항 임시저장글 조회하기(글쓰기 뷰단 페이지에 불러오기) -->
	<select id="getTemporaryNotice" parameterType="NoticeBoardVO" resultType="NoticeBoardVO">
		SELECT notice_no, notice_subject, notice_content
		FROM tbl_notice
		WHERE notice_status = 2
		AND fk_emp_id = #{fk_emp_id}
		AND notice_no = #{notice_no}
	</select>
	  
<!-- 공지사항 임시저장글 내용과 status = 2 를 1로 업데이트 해주기 -->
	<update id="updateNoticeTemporary" parameterType="NoticeBoardVO">
		UPDATE tbl_notice
		SET notice_subject = #{notice_subject},
		    notice_content = #{notice_content},
		    notice_status = 1
		WHERE notice_no = #{notice_no}
	</update>
	  
<!-- /////////////////////////////////////////////////////////// 공지사항 끝 /////////////////////////////////////////////// -->	  
	  












<!-- ///////////////////////////////////////// 부서게시판 시작 //////////////////////////////////////////////// -->	  


	  <!-- 부서 게시판 글쓰기 insert(파일첨부가 없는) -->
	  <insert id="deptBoardWrite" parameterType="BoardVO">
	  		insert into tbl_board(board_no, fk_dept_id, fk_emp_id, subject, content, view_count, board_status, board_regDate, fk_bcate_no, board_show)
			values(board_seq.nextval, #{fk_dept_id} , #{fk_emp_id} , #{subject} , #{content}, default, default, default , to_number(#{fk_bcate_no}), 1)
	  </insert>


	  <!-- 부서 게시판 마지막글번호 조회해오기(파일첨부시 필요) -->
	  <select id="board_no" resultType="int">
	  		select MAX(board_no)
	  		from tbl_board
	  </select>
	  
	  
	  <!-- 부서별 게시판에 글쓰기 insert(파일 첨부가 있는 경우라면) -->  
	  <insert id="BoardWrite_withFile" parameterType="BoardVO">
		    insert into tbl_attach_board(atboard_no, fk_board_no, atboard_filename, atboard_orgfilename ,atboard_filesize)
		    values(atboard_seq.nextval, to_number(#{board_no}) , #{atboard_filename} ,#{atboard_orgfilename}, #{atboard_filesize} )
	  </insert>
	  
	  
	 <!--  	페이징 처리를 안한 검색어가 없는 부서 게시판 전체 글목록 보여주기 -->
	 <resultMap type="HashMap" id="BoardSelect">
		<result property="name" 				column="name" 				javaType="String"/>
		<result property="board_no" 			column="board_no" 			javaType="String"/>
		<result property="fk_emp_id" 			column="fk_emp_id" 			javaType="String"/>
		<result property="fk_dept_id" 			column="fk_dept_id" 		javaType="String"/>
		<result property="subject" 				column="subject" 			javaType="String"/>
		<result property="content" 				column="content" 			javaType="String"/>
		<result property="view_count" 			column="view_count"			javaType="String"/>
		<result property="board_regDate" 		column="board_regDate"		javaType="String"/>
	 </resultMap> 
	 <select id="boardListNoSearch" resultMap="BoardSelect">
			SELECT B.board_no, B.fk_emp_id, E.name, B.subject, B.content,
			       B.view_count, 
			       TO_CHAR(B.board_regDate, 'yyyy-mm-dd hh24:mi:ss') AS board_regDate,
			       B.fk_dept_id
			FROM tbl_board B
			JOIN tbl_employee E ON E.emp_id = B.fk_emp_id
			WHERE B.board_status = 1
			ORDER BY B.board_no DESC
	 </select>
	  
	  
	  
<!-- 총 게시물 건수 (totalCount) 구하기 // 검색이 있을 때와 검색이 없을때로 나뉜다.  -->
	 <!-- 부서게시판 총 게시물 건수 -->
	 <select id="getTotalCount" parameterType="HashMap" resultType="int">
			SELECT count(*)
			FROM tbl_board B
			JOIN tbl_employee E ON E.emp_id = B.fk_emp_id
			WHERE board_status = 1
			AND B.fk_dept_id = #{fk_dept_id}
	   <choose>
	   		<when test='searchType == "subject" and searchWord != ""'>
	   			and lower(subject) like '%'|| lower(#{searchWord}) ||'%'
	   		</when>
	   		<when test='searchType == "content" and searchWord != ""'>
	   			and lower(content) like '%'|| lower(#{searchWord}) ||'%'
	   		</when>
	   		<when test='searchType == "subject_content" and searchWord != ""'>
	   			and (lower(subject) like '%'|| lower(#{searchWord}) ||'%' or lower(content) like '%'|| lower(#{searchWord}) ||'%')
	   		</when>
	   		<when test='searchType == "name" and searchWord != ""'>
	   			and lower(name) like '%'|| lower(#{searchWord}) ||'%'
	   		</when>
	   		<otherwise></otherwise>
	   </choose>
    </select> 
	  
	  
<!-- 부서 게시판 부서별 글목록 가져오기(페이징 처리 했으며, 검색어가 있는것 또는 검색어가 없는 것 모두 다 포함한 것이다.) -->
	 <resultMap type="HashMap" id="BoardPaging">
	 	<result property="board_no" 			column="board_no" 				javaType="String"/>
		<result property="fk_emp_id" 			column="fk_emp_id" 				javaType="String"/>
		<result property="fk_bcate_no" 			column="fk_bcate_no" 			javaType="String"/>
		<result property="fk_dept_id" 			column="fk_dept_id" 			javaType="String"/>
		<result property="name" 				column="name" 					javaType="String"/>
		<result property="subject" 				column="subject" 				javaType="String"/>
		<result property="view_count" 			column="view_count"				javaType="String"/>
		<result property="board_regdate" 		column="board_regdate"			javaType="String"/>
		<result property="content" 				column="content" 				javaType="String"/>
		<result property="atboard_filename" 	column="atboard_filename"		javaType="String"/>
		<result property="atboard_orgfilename" 	column="atboard_orgfilename"	javaType="String"/>
	 </resultMap> 	  
	 <select id="boardListSearch_withPaging" parameterType="HashMap" resultMap="BoardPaging"> 
		SELECT board_no
		     , fk_emp_id
             , fk_bcate_no
             , fk_dept_id
		     , name
		     , subject
		     , view_count
		     , board_regdate
             , content
		     , filenames       AS atboard_filename
		     , orgfilenames    AS atboard_orgfilename 
		FROM
		(
		    SELECT rownum AS rno,
		           board_no,
		           fk_emp_id,
		           name,
		           subject,
		           view_count,
		           board_regdate,
		           filenames,
		           orgfilenames,
		           content,
                   fk_bcate_no,
                   fk_dept_id
		    FROM
		    (
		        SELECT b.board_no,
		               b.fk_emp_id,
                       b.fk_bcate_no,
                       b.fk_dept_id,
		               e.name,
		               b.subject,
		               b.content,
		               b.view_count,
		               TO_CHAR(b.board_regdate, 'yyyy-mm-dd hh24:mi:ss') AS board_regdate,
		
		               LISTAGG(a.atboard_filename, ',')
		                   WITHIN GROUP (ORDER BY a.atboard_no) AS filenames,
		               LISTAGG(a.atboard_orgfilename , ',')
		                   WITHIN GROUP (ORDER BY a.atboard_no) AS orgfilenames
		        FROM tbl_board B
		        JOIN tbl_employee E 
                    ON E.emp_id = B.fk_emp_id
		        LEFT JOIN tbl_attach_board A 
                    ON A.fk_board_no = B.board_no
		        WHERE B.board_status = 1
		        AND B.fk_dept_id = #{fk_dept_id}
      <choose>
          <when test='searchType == "subject" and searchWord != ""'>
            and lower(subject) like '%'||lower(#{searchWord})||'%'
          </when>
          <when test='searchType == "content" and searchWord != ""'>
            and lower(content) like '%'||lower(#{searchWord})||'%'
          </when>
          <when test='searchType == "subject_content" and searchWord != ""'>
            and (lower(subject) like '%'||lower(#{searchWord})||'%' or lower(content) like '%'||lower(#{searchWord})||'%')
          </when>
          <when test='searchType == "name" and searchWord != ""'>
            and lower(name) like '%'||lower(#{searchWord})||'%'
          </when>
       	  <otherwise></otherwise>
       </choose>
			GROUP BY B.board_no,
                     B.fk_emp_id,
                     E.name,
                     B.subject,
                     B.content,
                     B.view_count,
                     B.board_regdate,
			         B.fk_bcate_no,
			         B.fk_dept_id
			        ORDER BY b.board_regdate DESC
			    ) V
			)
			WHERE rno BETWEEN #{startRno} AND #{endRno}
    </select>
	  
	  
	
	  

	  
	<!-- 부서 게시판 글 1개 조회하기(조회수 증가는 아래 쿼리문에서 실행, 이전글, 다음글 데이터도 가져옴) -->  
	<select id="getBoardView" resultType="BoardVO" parameterType="HashMap">
			SELECT previousseq, 
			       COALESCE(CAST(
			           CASE 
			               WHEN LENGTH(previoussubject) &lt; 30 THEN previoussubject 
			               ELSE SUBSTR(previoussubject, 1, 28) || '...' 
			           END 
			       AS NVARCHAR2(30)), N'..') AS previoussubject,
			
			       board_no, 
			       fk_emp_id, 
			       name, 
			       subject, 
			       content, 
			       view_count, 
			       board_regdate, 
			       nextseq, 
				   fk_dept_id,
				   fk_bcate_no,
			       COALESCE(CAST(
			           CASE 
			               WHEN LENGTH(nextsubject) &lt; 30 THEN nextsubject 
			               ELSE SUBSTR(nextsubject, 1, 28) || '...' 
			           END 
			       AS NVARCHAR2(30)), N'..') AS nextsubject,
			
			       atboard_filename, 
			       atboard_orgfilename, 
			       atboard_filesize
			       
			FROM (
			    SELECT 
			        LAG(N.board_no) OVER(ORDER BY N.board_no DESC) AS previousseq,
			        LAG(N.subject) OVER(ORDER BY N.board_no DESC) AS previoussubject,
			
			        N.board_no, 
			        N.fk_emp_id, 
			        E.name,
			        N.subject, 
			        N.content, 
			        N.view_count, 
			        N.board_regdate,
			        N.fk_dept_id,
			        N.fk_bcate_no,
			        LEAD(N.board_no) OVER(ORDER BY N.board_no DESC) AS nextseq,
			        LEAD(N.subject) OVER(ORDER BY N.board_no DESC) AS nextsubject,
			
			        COALESCE(LISTAGG(A.atboard_filename, ', ') WITHIN GROUP (ORDER BY A.atboard_no), '') AS atboard_filename,
			        COALESCE(LISTAGG(A.atboard_orgfilename, ', ') WITHIN GROUP (ORDER BY A.atboard_no), '') AS atboard_orgfilename,
			        COALESCE(SUM(A.atboard_filesize), 0) AS atboard_filesize
			
			    FROM tbl_board N
			    JOIN tbl_employee E 
			        ON N.fk_emp_id = E.emp_id
			    LEFT JOIN tbl_attach_board A 
			        ON N.board_no = A.fk_board_no
			    WHERE N.board_status = 1  
			    AND N.fk_dept_id = to_number(#{fk_dept_id})
				    <choose>
			          <when test='searchType == "subject" and searchWord != ""'>
			            and lower(subject) like '%'||lower(#{searchWord})||'%'
			          </when>
			          <when test='searchType == "content" and searchWord != ""'>
			            and lower(content) like '%'||lower(#{searchWord})||'%'
			          </when>
			          <when test='searchType == "subject_content" and searchWord != ""'>
			            and (lower(subject) like '%'||lower(#{searchWord})||'%' or lower(content) like '%'||lower(#{searchWord})||'%')
			          </when>
			          <when test='searchType == "name" and searchWord != ""'>
			            and lower(name) like '%'||lower(#{searchWord})||'%'
			          </when>
			          <otherwise></otherwise>
			       </choose> 
				    GROUP BY N.board_no, N.fk_emp_id, E.name, N.subject, 
                              N.content, N.view_count, N.board_regdate, N.fk_dept_id, N.fk_bcate_no
				) V
				WHERE V.board_no = #{board_no}
	</select>  
	  
	<!-- 부서 게시판 loginuser가 있고, 게시글이 있고, 다른 작성자의 글을 조회할 경우 조회수 1증가하기 -->  
	<update id="increase_BoardViewCount" parameterType="String">
	   	update tbl_board set view_count = view_count +1
   		where board_no = to_number(#{board_no})
	</update>	  

	<!-- 부서 게시판 글수정하기 --> 
    <update id="update_board" parameterType="BoardVO">
		  UPDATE tbl_board 
		  SET subject = #{subject}, 
		      content = #{content},
		      fk_bcate_no = #{fk_bcate_no},
		      board_regdate = default
		  WHERE board_no = TO_NUMBER(#{board_no})
    </update> 	  
 
   
    <!-- 부서 게시글에 첨부파일 또는 사진이 있는지 확인하는 메서드 호출 -->
	<!-- === 1개 글을 삭제할 때 먼저 사진이미지파일명 및 첨부파일명을 알아오기 위한것 ===  resultMap="HashMap" 기억!! 스마트에디터 먼저 해야함-->  
    <resultMap type="HashMap" id="BoardView_delete_map">
   	  <result property="board_no" 			column="board_no" 				javaType="String"/>	
   	  <result property="atboard_filename" 	column="atboard_filename" 		javaType="String"/>
   	  <result property="photofilename" 		column="photofilename"  		javaType="String"/>
    </resultMap>
    <select id="ischeckBoardAttachfile" resultMap="BoardView_delete_map" parameterType="String">
			SELECT 
			     n.board_no, 
			     a.atboard_filename, 
			 CASE 
			     WHEN func_Board_photo_upload_delete(n.board_no) IS NOT NULL THEN 
			          substr(func_Board_photo_upload_delete(n.board_no), 2) 
			     ELSE NULL 
			     END AS photofilename
			FROM tbl_board n
			LEFT JOIN tbl_attach_board a 
				 ON n.board_no = a.fk_board_no
			WHERE 
			 (EXISTS (
			     SELECT 1 FROM tbl_attach_board WHERE fk_board_no = n.board_no
			 ) 
			 OR 
			 func_Board_photo_upload_delete(n.board_no) IS NOT NULL)
		     <if test="board_no != null">
		          AND n.board_no = #{board_no} 
		     </if>
    </select>
	
	  
   <!-- === (파일첨부, 사진이미지가 들었는 경우 포함) 부서 게시글 삭제하기 ===  -->
   <delete id="BoardDel" parameterType="String">
   		delete from tbl_board
   		where board_no = #{board_no} 
   </delete>    

<!-- ================================================== 부서 게시판 임시저장 테이블 =======================================================================  -->	

	<!--  파일첨부가 없을 경우에 부서 테이블에 임시저장상태(status =2 ) 로 insert 해주는 메소드  -->
	<insert id="TempBoardWrite" parameterType="BoardVO">
  		insert into tbl_board(board_no, fk_dept_id, fk_emp_id, subject, content, view_count, board_status, board_regDate, fk_bcate_no, board_show)
		values(board_seq.nextval, #{fk_dept_id} , #{fk_emp_id} , #{subject} , #{content}, default, 2 , default , to_number(#{fk_bcate_no}), 1)
	</insert>


	<!-- 부서 게시판 임시저장 글 목록 조회(페이징 처리) -->
 	<resultMap type="HashMap" id="TemporaryBoardList_Map">
	    <result property="rno" 					column="rno" 				 javaType="String"/>
	    <result property="board_no" 			column="board_no" 			 javaType="String"/>
	    <result property="subject" 				column="subject" 			 javaType="String"/>
	    <result property="board_regdate" 		column="board_regdate" 		 javaType="String"/>
	    <result property="atboard_filename"		column="atboard_filename" 	 javaType="String"/>
	    <result property="atboard_orgfilename" 	column="atboard_orgfilename" javaType="String"/>   
	</resultMap>
	<select id="TemporaryBoardList" parameterType="HashMap" resultMap="TemporaryBoardList_Map">
		SELECT rno, board_no, subject, board_regdate, atboard_filename, atboard_orgfilename
		FROM (
		SELECT ROWNUM AS rno, 
		       board_no,
		       subject,
		       TO_CHAR(board_regdate, 'YYYY-MM-DD HH24:MI:SS') AS board_regdate,
		       atboard_filename,
		       atboard_orgfilename
		FROM (
		    SELECT n.board_no,
		           n.subject,
		           n.board_regdate,
		           NVL(LISTAGG(a.atboard_filename, ',') WITHIN GROUP (ORDER BY a.atboard_no), '') AS atboard_filename,
		           NVL(LISTAGG(a.atboard_orgfilename, ',') WITHIN GROUP (ORDER BY a.atboard_no), '') AS atboard_orgfilename
		    FROM tbl_board n
		    LEFT JOIN tbl_attach_board a
		           ON n.board_no = a.fk_board_no
		    WHERE n.board_status = 2 
		       AND n.fk_emp_id = #{fk_emp_id}
		    GROUP BY n.board_no, n.subject, n.board_regdate
		    ORDER BY n.board_regdate DESC
		)
		)
		WHERE rno BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<!-- 페이징 처리를 위한 loginuser가 작성한 공지사항 전체 임시저장 글 수 조회 -->
	<select id="getTemporaryCount" parameterType="String" resultType="int">
	    SELECT COUNT(*)
	    FROM tbl_board
	    WHERE board_status = 2 
	    AND fk_emp_id = #{fk_emp_id}
	</select>	   

<!-- 부서게시판 임시저장글 조회하기(글쓰기 뷰단 페이지에 불러오기) -->
	<select id="getTemporaryBoard" parameterType="BoardVO" resultType="BoardVO">
		SELECT board_no, subject, content
		FROM tbl_board
		WHERE board_status = 2
		AND fk_emp_id = #{fk_emp_id}
		AND board_no = #{board_no}
	</select>

<!-- 부서 게시판 임시저장글 내용과 status = 2 를 1로 업데이트 해주기 -->
<update id="updateBoardTemporary" parameterType="BoardVO">
	 UPDATE tbl_board
	SET subject = #{subject},
	    content = #{content},
        fk_bcate_no = #{fk_bcate_no},
	    board_status = 1,
        board_regdate = sysdate
	WHERE board_no = #{board_no}
</update>


<!-- /////////////////////////// 부서 댓글 시작 ///////////////////// -->

<!-- comment 테이블에 댓글 insert 해주는 메소드 -->
	<insert id="addBoardComment" parameterType="HashMap">
		insert into tbl_comment(comment_no, fk_board_no, fk_emp_id, cmt_content, cmt_regdate, cmt_status)
		values(comment_seq.nextval, #{fk_board_no}, #{fk_emp_id}, #{cmt_content}, default, default)
	</insert>

<!-- 등록된 댓글 조회하기(페이징처리된 댓글목록) -->
	<resultMap type="HashMap" id="CommentList_Map">
		<result property="comment_no" 	column="comment_no"  javaType="String"/>
		<result property="fk_board_no"  column="fk_board_no" javaType="String"/>
		<result property="cmt_content"  column="cmt_content" javaType="String"/>
		<result property="cmt_regdate"  column="cmt_regdate" javaType="String"/>
		<result property="name" 		column="name" 		 javaType="String"/>
		<result property="fk_emp_id" 	column="fk_emp_id" 	 javaType="String"/>
	</resultMap>
	<select id="CommentList_withPaging" resultMap="CommentList_Map">
		SELECT comment_no, fk_board_no, name, cmt_content, cmt_regdate, fk_emp_id
		FROM
		(
				SELECT row_number() over(order by cmt_regdate desc) AS rno
		             , C.comment_no
				     , C.fk_board_no
				     , C.cmt_content
				     , TO_CHAR(cmt_regdate, 'yyyy-mm-dd hh24:mi:ss') AS cmt_regdate
				     , E.name
		             , C.fk_emp_id
				  FROM tbl_comment C
				  JOIN tbl_employee E
				    ON C.fk_emp_id = E.emp_id
				 WHERE C.fk_board_no = #{fk_board_no}
		)V
		WHERE rno BETWEEN #{startRno} AND #{endRno}
	</select>

<!-- 페이징처리를 위한 각 게시글의 총 댓글수 알아오기 -->
	<select id="getCmtTotalCount" parameterType="String" resultType="int">
		SELECT count(*)
		FROM tbl_comment
		WHERE fk_board_no = #{fk_board_no}
	</select>

	
<!-- 해당 게시글의 댓글을 삭제하는 메소드 -->	
	<delete id="cmtDel" parameterType="CommentVO">
		DELETE FROM tbl_comment where comment_no = #{comment_no}
		AND fk_emp_id = #{fk_emp_id}
	</delete>

<!-- 웹에서 수정한 댓글 저장하기 -->
	<update id="cmtSave" parameterType="CommentVO">
		UPDATE tbl_comment set cmt_content = #{cmt_content}, 
		       cmt_regdate = sysdate
		WHERE comment_no = to_number(#{comment_no})
		AND fk_emp_id = #{fk_emp_id}
	</update>
<!-- /////////////////////////// 부서 댓글 끝 ///////////////////// -->



<!-- /////////////////////////// 부서 좋아요 시작 ///////////////////// -->
<!-- 해당 게시글에 loginuser 가 좋아요를 눌렀는지 안 눌렀는지 조회해오기 -->
	<select id="isExistLike" resultType="int" parameterType="String">
		SELECT count(*) 
		FROM tbl_like
		WHERE fk_board_no = to_number(#{board_no}) 
		AND fk_emp_id = #{fk_emp_id}
	</select>


<!-- 좋아요 버튼을 누르면 좋아요수 1증가해주는 메소드 -->
	<insert id="addlike" parameterType="String">
		INSERT INTO tbl_like(like_no, fk_board_no, fk_emp_id)
		VALUES(like_seq.nextval, #{board_no}, #{fk_emp_id})
	</insert>

<!-- 하트를 눌렀던 상태에서 한 번더 눌렀을 경우(1이 나왔을 경우)에만 tbl_like 테이블에 delete 해준다. -->
	<delete id="removeLike" parameterType="String">
		DELETE FROM tbl_like 
		WHERE fk_board_no = #{board_no}
		AND fk_emp_id = #{fk_emp_id}
	</delete>


<!-- 해당 게시글의 좋아요 수 알아오기 시작 -->
	<select id="likeCnt" parameterType="String" resultType="int">
		SELECT count(*) 
		FROM tbl_like
		WHERE fk_board_no = #{board_no} 
	</select>

<!-- /////////////////////////// 부서 좋아요 끝 ///////////////////// -->
<!-- 내가 좋아요 누른 총 게시물 건수(페이징 처리) -->
	<select id="getLikeTotalCount" parameterType="String" resultType="int">
		SELECT count(*)
		FROM tbl_like L
		JOIN tbl_board B
		ON B.board_no = L.fk_board_no
		JOIN tbl_employee E
		ON E.emp_id = B.fk_emp_id
		WHERE emp_id = #{emp_id}
	</select>


<!-- 페이징 처리된 내가 좋아요 누른 게시글 목록 조회하기 -->
	<select id="goLike_withPaging" parameterType="HashMap" resultType="BoardVO">
		SELECT 
		    board_no,
		    subject,
		    fk_bcate_no,
		    name,
		    board_regdate,
		    view_count,
		    emp_id
		FROM
		(
		    SELECT 
		        ROWNUM AS rno,
		        board_no,
		        subject,
		        fk_bcate_no,
		        name,
		        board_regdate,
		        view_count,
		        emp_id
		    FROM
		    (
		        SELECT 
		            B.board_no,
		            B.subject,
		            B.fk_bcate_no,
		            E.name,
		            TO_CHAR(B.board_regdate, 'yyyy-mm-dd hh24:mi:ss') AS board_regdate,
		            B.view_count,
		            E.emp_id
		        FROM tbl_like L
		        JOIN tbl_board B ON B.board_no = L.fk_board_no
		        JOIN tbl_employee E ON E.emp_id = B.fk_emp_id
		        WHERE E.emp_id = #{emp_id}
		        ORDER BY B.board_regdate DESC
		    ) V
		)    
		WHERE rno BETWEEN #{startRno} AND #{endRno}
	</select>
<!-- ///////////////////////////////////////// 부서게시판 끝 //////////////////////////////////////////////// -->	  
</mapper>



